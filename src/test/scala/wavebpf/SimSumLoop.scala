package wavebpf

import spinal.core._
import spinal.sim._
import spinal.core.sim._

import org.scalatest.funsuite.AnyFunSuite

class SimSumLoopSpec extends AnyFunSuite {
  // tests go here...
  test("SimSumLoop") {
    import SimUtil._
    runWithAllBackends(new Wbpf) { dut =>
      initDutForTesting(dut)

      val firstExc = dut.io.excOutput.head

      loadCode(
        dut,
        0,
        0x0,
        Array[Short](
          0xb7, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x79, 0x11, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x10, 0x00,
          0x00, 0x00, 0x79, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7,
          0x03, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x79, 0x33, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0x00, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x43, 0x00, 0x00, 0x7b, 0x43,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x30, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x7d, 0x12, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x0f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x30, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d,
          0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0xfa, 0xff,
          0x00, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ).map(_.toByte)
      )
      println("Code loaded.")

      dmWriteOnce(dut, 0x10, 1)
      dmWriteOnce(dut, 0x18, 10)
      dmWriteOnce(dut, 0x20, 0x30)

      assert(firstExc.valid.toBoolean)
      assert(firstExc.code.toEnum == CpuExceptionCode.NOT_INIT)

      mmioWrite(dut, 0x1018, 0x00)
      dut.clockDomain.waitSamplingWhere(!firstExc.valid.toBoolean)
      while (!firstExc.valid.toBoolean) {
        println("*** CLOCK CYCLE ***")
        dut.clockDomain.waitSampling()
      }
      assert(firstExc.code.toEnum == CpuExceptionCode.EXIT)

      assert(mmioRead(dut, 0x1018) == 0x88) // pc
      assert(mmioRead(dut, 0x1020) == (BigInt(5) | (BigInt(1) << 31))) // code

      println("Code execution completed.")
      println("Running check.")
      assert(dmReadOnce(dut, 0x30) == 45L + 0x434200004100L)
      println("Check passed.")
    }
  }
}
